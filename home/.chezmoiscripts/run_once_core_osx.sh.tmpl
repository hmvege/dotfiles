{{ if (eq .chezmoi.os "darwin") -}}
#!/bin/bash

# Set to catch non-zero exit status errors, variable errors or pipeline
# failures.
set -euo pipefail

if ! type -p xcodebuild >/dev/null 2>&1
then
    # Starts by installing basic developer tools for OSX
    xcode-select --install
fi

packages=(
    bat
    fd
    fzf
    git
    htop
    jq
    lsd
    node  # Needed by LSP
    pipx
    pyenv
    pyenv-virtualenv
    tmux
    unzip
    # vim # Should already be installed on Mac
    wget
    zsh
)

## Brew
if ! type -p brew >/dev/null 2>&1
then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo "Installed Brew"
else
    echo "Brew is already installed"
fi

if [[ "$(uname -m)" == "arm64" ]]; then
    # Apple Silicon typically uses /opt/homebrew
    eval "$(/opt/homebrew/bin/brew shellenv)"
else
    # Intel typically uses /usr/local
    eval "$(/usr/local/bin/brew shellenv)"
fi

brew update
brew upgrade

for pkg in ${packages[@]}
do
    brew install $pkg
done
echo "Packages installed"

## OMZ 
if [ ! -d "${HOME}/.oh-my-zsh" ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo "Oh My Zsh is installed."
fi

# oh-my-zsh plugins
ZSH_CUSTOM="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"

if [ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \
      "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"
fi

if [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions.git \
      "$ZSH_CUSTOM/plugins/zsh-autosuggestions"
fi

## pyenv
PYTHON_GLOBAL="3.12.9"

if type -p pyenv >/dev/null 2>&1
then
    echo "pyenv exists: proceeding to check if global python is set to $PYTHON_GLOBAL"
    if ! pyenv which python | grep -q $PYTHON_GLOBAL
    then
        echo "Setting up pyenv globals"
        pyenv install $PYTHON_GLOBAL
        pyenv global $PYTHON_GLOBAL
    else
        echo "Global Python is already set to $PYTHON_GLOBAL"
    fi
fi

## pipx
if ! type -p pipx >/dev/null 2>&1
then
    pipx ensurepath
fi

pipx_packages=(
    black
    flake8
    mkdocs
    mypy
    pip-tools
    poetry
    pre-commit
)
for pkg in ${pipx_packages[@]}
do
    pipx install --python {{ .chezmoi.homeDir }}/.pyenv/shims/python3 $pkg
done

## Mypy package injections
mypy_packages=(
    types-requests
)
for pkg in ${mypy_packages[@]}
do
    pipx inject mypy $pkg
done

## Flake8 package injections
flake8_packages=(
    flake8-broken-line
    flake8-bugbear
    flake8-builtins
    flake8-docstrings
    flake8-docstrings-complete
    flake8-import-order
    flake8-markdown
    flake8-pie
    flake8-scream
    flake8-simplify
    flake8-use-fstring
    flake8-useless-assert
)
for pkg in ${flake8_packages[@]}
do
    pipx inject flake8 $pkg
done

## fzf installation completion
$(brew --prefix)/opt/fzf/install

## vim plugin manager
if [ ! -d "${HOME}/.vim/autoload/plug.vim" ]
then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "vim plugin manager installed"
else
    echo "vim plugin manager already installed"
fi

## VSCode installation
if [ ! type -p code >/dev/null 2>&1 ]
then
    brew install --cask visual-studio-code
    echo "VSCode installed."
else
    echo "VSCode already installed"
fi

vscode_extensions=(
    cschlosser.doxdocgen
    eamodio.gitlens
    ms-azuretools.vscode-docker
    ms-python.python
    ms-python.vscode-pylance
    ms-toolsai.jupyter
    ms-toolsai.jupyter-keymap
    ms-toolsai.jupyter-renderers
    ms-toolsai.vscode-jupyter-cell-tags
    ms-toolsai.vscode-jupyter-slideshow
    ms-vscode-remote.remote-containers
    ms-vscode.cmake-tools
    ms-vscode.cpptools
    ms-vscode.cpptools-extension-pack
    ms-vscode.cpptools-themes
    sashaweiss.block-travel
    streetsidesoftware.code-spell-checker
    twxs.cmake
    xaver.clang-format
    yzhang.markdown-all-in-one

)

installed_extensions=$(code --list-extensions)
for extension in ${vscode_extensions[@]}
do
    if ! echo $installed_extensions | grep -q $extension
    then
        code --install-extension $extension
        echo "Installed $extension"
    else
        echo "VSCode extension $extension found"
    fi
done

{{ end -}}
