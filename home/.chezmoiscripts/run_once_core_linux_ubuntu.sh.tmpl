{{ if (eq .chezmoi.os "linux") -}}
{{ if (eq .chezmoi.osRelease.id "ubuntu") -}}
#!/bin/bash

# Set to catch non-zero exit status errors, variable errors or pipeline
# failures.
set -euo pipefail

sudo apt-get update

packages=(
    # Various CLI tools
    bat
    fd-find
    git
    htop
    jq
    tmux
    vim
    rename
    unzip
    wget
    zsh
    # Various packages needed for development
    build-essential
    libbz2-dev
    libffi-dev
    liblzma-dev
    libreadline-dev
    libsqlite3-dev
    libssl-dev
    tk-dev
    zlib1g-dev
    # Python + python packages, adhering to Python 3.12+ PEP 668
    python3
    python3-venv
    python3-pip
    python3-tk
)

# For Gogh terminal colors
packages_gogh_requirements=(
    dconf-cli
    uuid-runtime
)

{{ if not .lite }}
packages+=( "${packages_gogh_requirements[@]}" )
{{ end }}

sudo apt-get install -y ${packages[@]}
echo "Packages installed."

sudo chsh -s $(which zsh)

## Bat
mkdir -vp ~/.local/bin
if [ ! -L ~/.local/bin/bat ]
then
    ln -s /usr/bin/batcat ~/.local/bin/bat
    echo "Bat is installed and linked"
else
    echo "Bat is already installed and linked"
fi

## Oh-my-zsh
if [ -d "${HOME}/.oh-my-zsh" ]; then
    echo "Oh My Zsh already installed at: ${HOME}/.oh-my-zsh"
else
    # sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended --keep-zshrc
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo "Oh My Zsh is installed."
fi

# Oh-my-zsh plugins
if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]
then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
    echo "zsh-syntax-highlighting downloaded and installed"
else
    echo "zsh-syntax-highlighting already installed"
fi

if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]
then
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    echo "zsh-autosuggestions downloaded and installed"
else
    echo "zsh-autosuggestions already installed"
fi

{{ if not .lite }}
## tmux plugins
if [ ! -d "${HOME}/.tmux/plugins/tpm" ]
then
    git clone https://github.com/tmux-plugins/tpm.git ${HOME}/.tmux/plugins/tpm
    echo "tmux plugin manager installed."
else
    echo "tmux plugin manager already installed."
fi
{{ end }}

## vim plugin manager
if [ ! -d "${HOME}/.vim/autoload/plug.vim" ]
then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "vim plugin manager installed"
else
    echo "vim plugin manager already installed"
fi

## Install zoxide
if ! type -p z >/dev/null 2>&1
then    
    # Try distro package first (Ubuntu 24.04+ ships zoxide)
    if sudo apt-get install -y zoxide; then
        echo "Installed zoxide via apt"
    else
        # Fallback to upstream script, but donâ€™t exit on failure
        curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh \
            | sh || echo "zoxide install failed, continuing anyway"
    fi
else
    echo "Already installed zoxide"
fi

## install fzf
if ! type -p fzf >/dev/null 2>&1
then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
    echo "Installed fzf"
else
    echo "Already installed fzf"
fi

## pyenv + pyenv-virtualenv
if ! type -p pyenv >/dev/null 2>&1
then
    PYTHON_GLOBAL="3.12.9"

    curl https://pyenv.run | bash
    echo "Installed pyenv and pyenv-virtualenv"

    # See https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    # in case the build fails.
    sudo apt-get install libssl-dev
    # pyenv calls ensurepip in the background, which will trigger Python 3.12>
    # safety feature against making changes to global python install, even tho
    # no packages are being installed in the global Python environment.
    PIP_BREAK_SYSTEM_PACKAGES=1 $HOME/.pyenv/bin/pyenv install $PYTHON_GLOBAL
    PIP_BREAK_SYSTEM_PACKAGES=1 $HOME/.pyenv/bin/pyenv global $PYTHON_GLOBAL
else
    echo "Already installed pyenv and pyenv-virtualenv"
fi

## pipx
{{ if (eq .chezmoi.osRelease.versionID "20.04") -}}
echo "WARNING: Ubuntu 20.04 install script will be deprecated!"
if ! type -p pipx >/dev/null 2>&1
then
    sudo /usr/bin/python3 -m pip install pipx
    echo "Installed pipx"
    /usr/local/bin/pipx ensurepath
    pipx_packages=(
        black
        flake8
        mkdocs
        mypy
        pip-tools
        poetry
        pre-commit
    )
    for pkg in ${pipx_packages[@]}
    do
        /usr/local/bin/pipx install --python {{ .chezmoi.homeDir }}/.pyenv/shims/python3 $pkg
    done

    ## Mypy package injections
    mypy_packages=(
        types-requests
    )
    for pkg in ${mypy_packages[@]}
    do
        /usr/local/bin/pipx inject mypy $pkg
    done

    ## Flake8 package injections
    flake8_packages=(
        flake8-broken-line
        flake8-bugbear
        flake8-builtins
        flake8-docstrings
        flake8-docstrings-complete
        flake8-import-order
        flake8-markdown
        flake8-pie
        flake8-scream
        flake8-simplify
        flake8-use-fstring
        flake8-useless-assert
    )
    for pkg in ${flake8_packages[@]}
    do
        /usr/local/bin/pipx inject flake8 $pkg
    done

else
    echo "Already installed pipx"
fi
{{ else -}}
if ! type -p pipx >/dev/null 2>&1
then
    sudo apt-get install -y pipx
    echo "Installed pipx"

    pipx ensurepath
    pipx_packages=(
        black
        flake8
        mkdocs
        mypy
        pip-tools
        poetry
        pre-commit
    )
    for pkg in ${pipx_packages[@]}
    do
        pipx install --python {{ .chezmoi.homeDir }}/.pyenv/shims/python3 $pkg
    done

    ## Mypy package injections
    mypy_packages=(
        types-requests
    )
    for pkg in ${mypy_packages[@]}
    do
        pipx inject mypy $pkg
    done

    ## Flake8 package injections
    flake8_packages=(
        flake8-broken-line
        flake8-bugbear
        flake8-builtins
        flake8-docstrings
        flake8-docstrings-complete
        flake8-import-order
        flake8-markdown
        flake8-pie
        flake8-scream
        flake8-simplify
        flake8-use-fstring
        flake8-useless-assert
    )
    for pkg in ${flake8_packages[@]}
    do
        pipx inject flake8 $pkg
    done

else
    echo "Already installed pipx"
fi
{{ end -}}

# ## Brew # NOTE: unused since built in tools cover most of what is needed
# if ! type -p brew >/dev/null 2>&1
# then
#     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#     echo "Installed Brew"
# fi

{{ if and .gui (not .lite) }}
# We only install VSCode if snap is available on the system
if command -v snap &> /dev/null; then
    if ! type -p code >/dev/null 2>&1
    then
        sudo snap install --classic code
        echo "Installed VSCode"
    else
        echo "Already installed VSCode"
    fi

    vscode_extensions=(
        cschlosser.doxdocgen
        eamodio.gitlens
        ms-azuretools.vscode-docker
        ms-python.python
        ms-python.vscode-pylance
        ms-toolsai.jupyter
        ms-toolsai.jupyter-keymap
        ms-toolsai.jupyter-renderers
        ms-toolsai.vscode-jupyter-cell-tags
        ms-toolsai.vscode-jupyter-slideshow
        ms-vscode-remote.remote-containers
        ms-vscode.cmake-tools
        ms-vscode.cpptools
        ms-vscode.cpptools-extension-pack
        ms-vscode.cpptools-themes
        sashaweiss.block-travel
        streetsidesoftware.code-spell-checker
        twxs.cmake
        xaver.clang-format
        yzhang.markdown-all-in-one
    )

    installed_extensions=$(code --list-extensions)
    for extension in ${vscode_extensions[@]}
    do
        if ! echo $installed_extensions | grep -q $extension
        then
            code --install-extension $extension
            echo "Installed $extension"
        else
            echo "VSCode extension $extension found"
        fi
    done

else
    echo "Snap is not available. Skipping VSCode installation."
fi
{{ end -}}

## Check that fdfind is installed
if [ ! -h ~/.local/bin/fd ]
then
    ln -s $(which fdfind) ~/.local/bin/fd
fi

{{ if not .lite }}
## lsd
if ! type -p lsd >/dev/null 2>&1
then
    if curl -fsSL -o lsd.deb https://github.com/lsd-rs/lsd/releases/download/v1.0.0/lsd_1.0.0_amd64.deb
    then
        sudo dpkg -i lsd.deb
    else
        echo "Error downloading lsd package" >&2
        exit 1
    fi

    # Cleanup
    rm -v lsd.deb

    # /home/linuxbrew/.linuxbrew/bin/brew install lsd
    echo "Installed lsd"
else
    echo "Already installed lsd"
fi

# Will not install Gogh if WSL is detected
{{ if (not (.chezmoi.kernel.osrelease | lower | contains "microsoft")) }}
## Gogh theme install setup
# Clones the repo into "$HOME/src/gogh"
if [ "$TERM" = "xterm" ]
then
    echo "Terminal is xterm. Skipping Gogh installation since terminal is not supported by Gogh."
else
    GOGH_DIRECTORY="$HOME/src/gogh"
    if [ ! -d $GOGH_DIRECTORY ]
    then
        mkdir -p "$HOME/src"
        cd "$HOME/src"
        git clone https://github.com/Gogh-Co/Gogh.git gogh
        cd "$GOGH_DIRECTORY"

        # necessary on ubuntu
        export TERMINAL=gnome-terminal

        # install themes
        cd installs
        ./afterglow.sh
        cd "$HOME"
        echo "Gogh theme installation complete"
    fi
fi
{{ end -}}
{{ end -}}
{{ end -}}
{{ end -}}
