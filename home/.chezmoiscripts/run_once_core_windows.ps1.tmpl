{{ if eq .chezmoi.os "windows" }}
# run_once_core_windows.ps1.tmpl
# Sets up core tools for Windows: PowerShell, Scoop, pipx, oh-my-posh, bat, etc.

# Ensuring Get-FileHash is available for scoop.
Import-Module Microsoft.PowerShell.Utility -ErrorAction SilentlyContinue

# If that still didn’t give us Get-FileHash, define a tiny .NET fallback:
if (-not (Get-Command Get-FileHash -ErrorAction SilentlyContinue)) {
    function Get-FileHash {
        param(
            [Parameter(Mandatory)]
            [string] $Path,
            [ValidateSet('SHA1','SHA256','MD5')]
            [string] $Algorithm = 'SHA256'
        )
        $alg   = [System.Security.Cryptography.HashAlgorithm]::Create($Algorithm)
        $stream= [System.IO.File]::OpenRead($Path)
        try {
            $bytes = $alg.ComputeHash($stream)
        } finally {
            $stream.Close()
        }
        return [PSCustomObject]@{
            Algorithm = $Algorithm
            Hash      = ([BitConverter]::ToString($bytes)).Replace('-','')
        }
    }
}

# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

Write-Output "--- Running Windows core setup script ---"

# Install or update PowerShell
$pwshInstallScript = "{{ .chezmoi.sourceDir }}\scripts\install_powershell.ps1"
if (Test-Path $pwshInstallScript) {
    Write-Output "Running PowerShell installation script..."
    & $pwshInstallScript
} else {
    Write-Warning "PowerShell install script not found at $pwshInstallScript"
}

# Install Scoop
if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
    Write-Output "Installing Scoop..."
    Set-ExecutionPolicy RemoteSigned -scope CurrentUser -Force
    Invoke-RestMethod get.scoop.sh | Invoke-Expression
} else {
    Write-Output "Scoop is already installed."
}

if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Output "Installing Git (required for Scoop buckets)…"
    # Using silent progress bar and aria2 for faster downloads.
    $ProgressPreference='SilentlyContinue'; scoop install aria2 git
}

function Ensure-ScoopBucket {
    param([string]$Name)

    $escaped = [regex]::Escape($Name)
    if (-not (scoop bucket list | Select-String -Pattern "^$escaped(\s|$)")) {
        Write-Output "Adding Scoop bucket: $Name"
        scoop bucket add $Name
    }
    else {
        Write-Output "Bucket '$Name' already exists."
    }
}

function Ensure-ScoopPackage {
    param([string]$Name)

    $escaped = [regex]::Escape($Name)
    if (-not (scoop list | Select-String -Pattern "^$escaped(\s|$)")) {
        Write-Output "Installing $Name ..."
        scoop install $Name
    }
    else {
        Write-Output "$Name already installed."
    }
}

# Scoop setup
Ensure-ScoopBucket 'extras'
Ensure-ScoopBucket 'nerd-fonts'
scoop update

# Install CLI + font package (fonts can live here if you like)
$packages = @(
    "bat",
    "curl",
    "fd",
    "fzf",
    "git",
    "jq",
    "lsd",
    "oh-my-posh",
    "python",
    "psfzf",
    "ripgrep",
    "sublime-merge",
    "vim",
    "zoxide"
)

foreach ($pkg in $packages) {
    Ensure-ScoopPackage $pkg
}
Ensure-ScoopPackage "Meslo-NF"
Ensure-ScoopPackage "JetBrainsMono-NF"

# Ensure Python + pipx setup
if (-not (Get-Command pipx -ErrorAction SilentlyContinue)) {
    Write-Output "Installing pipx via Python..."
    python -m pip install --user pipx
    python -m pipx ensurepath
} else {
    Write-Output "pipx is already installed."
}

# pipx packages
$pipxPkgs = @(
    "black",
    "flake8",
    "mypy",
    "pre-commit",
    "poetry",
    "pip-tools",
    "mkdocs"
)

foreach ($pkg in $pipxPkgs) {
    if (-not (& python -m pipx list | Select-String -Pattern $pkg)) {
        python -m pipx install $pkg
    } else {
        Write-Output "$pkg already installed with pipx."
    }
}

{{ if and .gui (not .lite) }}
# Install VSCode
if (-not (Get-Command code -ErrorAction SilentlyContinue)) {
    Write-Output "Installing Visual Studio Code..."
    scoop install vscode
} else {
    Write-Output "Visual Studio Code is already installed."
}

# Ensure VSCode CLI is on PATH
$codePath = "$env:USERPROFILE\\scoop\\apps\\vscode\\current\\bin"
if (-not ($env:PATH -split ';' | Where-Object { $_ -eq $codePath })) {
    [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$codePath", [EnvironmentVariableTarget]::User)
    Write-Output "Added VSCode CLI path to user PATH. You may need to restart your terminal."
} else {
    Write-Output "VSCode CLI path already in PATH."
}

# Install VSCode extensions
$vscodeExtensions = @(
    "cschlosser.doxdocgen",
    "eamodio.gitlens",
    "esbenp.prettier-vscode",
    "ms-azuretools.vscode-docker",
    "ms-python.python",
    "ms-toolsai.jupyter",
    "ms-vscode-remote.remote-containers",
    "ms-vscode.cmake-tools",
    "ms-vscode.cpptools-extension-pack",
    "ms-vscode.cpptools-themes",
    "ms-vscode.cpptools",
    "sashaweiss.block-travel",
    "streetsidesoftware.code-spell-checker",
    "twxs.cmake",
    "xaver.clang-format",
    "yzhang.markdown-all-in-one"
)

foreach ($ext in $vscodeExtensions) {
    if (-not (code --list-extensions | Select-String -Pattern $ext)) {
        code --install-extension $ext
        Write-Output "Installed VSCode extension: $ext"
    } else {
        Write-Output "VSCode extension $ext is already installed."
    }
}
{{ end -}}

# Final message
Write-Output "==== Windows core tools setup complete ===="
Write-Output "You may need to restart your terminal for all changes to take effect."
{{ end }}
